Sander:
What is the database in DBgenerate.py for? 
From what I can gather from skimming is that this runs calculations on cocalc?
Some of the functions that generate mol objects in rdkit are not present since rdkit is imported but never used.
For now, I'll work on translating the notebooks to python and making them more general.

Examples of running the generatePolymer function in MakePolymer.py:
python3 MakePolymer.py -n 3 -m Styrene -v
Polymer interpreted as: Hydrogen 3 * Styrene Hydrogen
This gives the following SMILES: CC(c1ccccc1)CC(c1ccccc1)CC(c1ccccc1)

python3 MakePolymer.py -n 4 -s 2 "CC(C(=O)OCCCC)" "CC(C)" -i Methoxy -t Benzyl -v
Polymer interpreted as: Methoxy 4 * ['CC(C(=O)OCCCC)', '2', 'CC(C)'] Benzyl
This gives the following SMILES: COCC(C(=O)OCCCC)CC(C)CC(C)CC(C(=O)OCCCC)CC(C)CC(C)CC(C(=O)OCCCC)CC(C)CC(C)CC(C(=O)OCCCC)CC(C)CC(C)c1ccccc1CO

There is no selection for the "best" conformer as in some of the other jupyter notebooks. This can be added soon, just seeing utility of the current suite of command-line aruments.
-->AllChem.MMFFOptimizeMolecule(pol_h, maxIters=1000) #does this repeated optimization obviate the need for the bestConformer function (copied from polymer LogP v4_4_4_alla*)

Do we want to highlight parts of the molecule?
https://www.rdkit.org/docs/Cookbook.html#highlight-a-substructure-in-a-molecule

It would be nice to be able to read a file (.xyz, .pdb or .mol) to skip time-consuming optimization
